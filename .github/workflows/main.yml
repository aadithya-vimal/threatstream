# File: .github/workflows/main.yml
name: Fetch ThreatStream Data

# Controls when the workflow will run
on:
  # Triggers the workflow every 5 minutes
  schedule:
    - cron: '*/360 * * * *' 

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "fetch-data"
  fetch-data:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Sets up Python 3.10 environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Specify the Python version

      # 3. Install dependencies from requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Decode and save Firebase Service Account Key
      #    The secret GOOGLE_APPLICATION_CREDENTIALS_BASE64 needs to be the base64 encoded content of your service-account.json
      - name: Setup Google Credentials
        env:
          GOOGLE_CREDS_BASE64: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_BASE64 }}
        run: |
          echo "Decoding Firebase service account key..."
          echo $GOOGLE_CREDS_BASE64 | base64 --decode > $GITHUB_WORKSPACE/service-account-key-from-secrets.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GITHUB_WORKSPACE/service-account-key-from-secrets.json" >> $GITHUB_ENV
          echo "::add-mask::$GITHUB_WORKSPACE/service-account-key-from-secrets.json" # Mask the file path in logs

      # 5. Run the Python script
      - name: Run Fetch Threats Script
        env:
          # Pass secrets needed by the Python script as environment variables
          FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
          MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}
          # GOOGLE_APPLICATION_CREDENTIALS is set in the previous step via $GITHUB_ENV
        run: python fetch_threats.py

      # Optional: Clean up the decoded key file after the script runs
      - name: Clean up Google Credentials file
        if: always() # Run this step even if the previous step failed
        run: rm -f $GITHUB_WORKSPACE/service-account-key-from-secrets.json
